/* $Id$   */
/* DO NOT EDIT - file generated by ObitTables.pl                      */
/*--------------------------------------------------------------------*/
/*;  Copyright (C)  2009                                              */
/*;  Associated Universities, Inc. Washington DC, USA.                */
/*;                                                                   */
/*;  This program is free software; you can redistribute it and/or    */
/*;  modify it under the terms of the GNU General Public License as   */
/*;  published by the Free Software Foundation; either version 2 of   */
/*;  the License, or (at your option) any later version.              */
/*;                                                                   */
/*;  This program is distributed in the hope that it will be useful,  */
/*;  but WITHOUT ANY WARRANTY; without even the implied warranty of   */
/*;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    */
/*;  GNU General Public License for more details.                     */
/*;                                                                   */
/*;  You should have received a copy of the GNU General Public        */
/*;  License along with this program; if not, write to the Free       */
/*;  Software Foundation, Inc., 675 Massachusetts Ave, Cambridge,     */
/*;  MA 02139, USA.                                                   */
/*;                                                                   */
/*;Correspondence about this software should be addressed as follows: */
/*;         Internet email: bcotton@nrao.edu.                         */
/*;         Postal address: William Cotton                            */
/*;                         National Radio Astronomy Observatory      */
/*;                         520 Edgemont Road                         */
/*;                         Charlottesville, VA 22903-2475 USA        */
/*--------------------------------------------------------------------*/
%{
#include "Obit.h"
#include "ObitData.h"
#include "ObitTableIDI_ARRAY_GEOMETRY.h"
%}
 
%inline %{
 
extern ObitTable* TableIDI_ARRAY_GEOMETRY (ObitData *inData, long *tabVer,
 	                   int access,
 	                   char *tabName,
                           int no_band, int numOrb,
                           ObitErr *err)
 {
   ObitIOAccess laccess;
   /* Cast structural keywords to correct type */
   oint lno_band = (oint)no_band;
   oint lnumOrb = (oint)numOrb;
   olong ltabVer = (olong)*tabVer;
   ObitTable *outTable=NULL;
   laccess = OBIT_IO_ReadOnly;
   if (access==2) laccess = OBIT_IO_WriteOnly;
   else if (access==3) laccess = OBIT_IO_ReadWrite;
   outTable = (ObitTable*)newObitTableIDI_ARRAY_GEOMETRYValue ((gchar*)tabName, inData, (olong*)&ltabVer,
   			   laccess, 
                           lno_band, lnumOrb,
                           err);
   *tabVer = (long)ltabVer;
   return outTable;
   }
 
extern PyObject* TableIDI_ARRAY_GEOMETRYGetHeadKeys (ObitTable *inTab) {
  PyObject *outDict=PyDict_New();
  ObitTableIDI_ARRAY_GEOMETRY *lTab = (ObitTableIDI_ARRAY_GEOMETRY*)inTab;
  PyDict_SetItemString(outDict, "no_band",  PyInt_FromLong((long)lTab->no_band));
  PyDict_SetItemString(outDict, "numOrb",  PyInt_FromLong((long)lTab->numOrb));
  PyDict_SetItemString(outDict, "tabrev",  PyInt_FromLong((long)lTab->tabrev));
  PyDict_SetItemString(outDict, "no_stkd",  PyInt_FromLong((long)lTab->no_stkd));
  PyDict_SetItemString(outDict, "stk_1",  PyInt_FromLong((long)lTab->stk_1));
  PyDict_SetItemString(outDict, "no_chan",  PyInt_FromLong((long)lTab->no_chan));
  PyDict_SetItemString(outDict, "ref_freq",  PyFloat_FromDouble((double)lTab->ref_freq));
  PyDict_SetItemString(outDict, "chan_bw",  PyFloat_FromDouble((double)lTab->chan_bw));
  PyDict_SetItemString(outDict, "ref_pixl",  PyInt_FromLong((long)lTab->ref_pixl));
  PyDict_SetItemString(outDict, "obscode", PyString_InternFromString(lTab->obscode));
  PyDict_SetItemString(outDict, "RefDate", PyString_InternFromString(lTab->RefDate));
  PyDict_SetItemString(outDict, "frame", PyString_InternFromString(lTab->frame));
  PyDict_SetItemString(outDict, "Freq",  PyFloat_FromDouble((double)lTab->Freq));
  PyDict_SetItemString(outDict, "TimeSys", PyString_InternFromString(lTab->TimeSys));
  PyDict_SetItemString(outDict, "GSTiat0",  PyFloat_FromDouble((double)lTab->GSTiat0));
  PyDict_SetItemString(outDict, "DegDay",  PyFloat_FromDouble((double)lTab->DegDay));
  PyDict_SetItemString(outDict, "iatUtc",  PyFloat_FromDouble((double)lTab->iatUtc));
  PyDict_SetItemString(outDict, "PolarX",  PyFloat_FromDouble((double)lTab->PolarX));
  PyDict_SetItemString(outDict, "PolarY",  PyFloat_FromDouble((double)lTab->PolarY));
  PyDict_SetItemString(outDict, "ArrayX",  PyFloat_FromDouble((double)lTab->ArrayX));
  PyDict_SetItemString(outDict, "ArrayY",  PyFloat_FromDouble((double)lTab->ArrayY));
  PyDict_SetItemString(outDict, "ArrayZ",  PyFloat_FromDouble((double)lTab->ArrayZ));

  return outDict;
} 

extern void TableIDI_ARRAY_GEOMETRYSetHeadKeys (ObitTable *inTab, PyObject *inDict) {
  ObitTableIDI_ARRAY_GEOMETRY *lTab = (ObitTableIDI_ARRAY_GEOMETRY*)inTab;
  char *tstr;
  int lstr=MAXKEYCHARTABLEIDI_ARRAY_GEOMETRY;

  lTab->tabrev = (oint)PyInt_AsLong(PyDict_GetItemString(inDict, "tabrev"));
  lTab->no_stkd = (oint)PyInt_AsLong(PyDict_GetItemString(inDict, "no_stkd"));
  lTab->stk_1 = (oint)PyInt_AsLong(PyDict_GetItemString(inDict, "stk_1"));
  lTab->no_chan = (oint)PyInt_AsLong(PyDict_GetItemString(inDict, "no_chan"));
  lTab->ref_freq = (odouble)PyFloat_AsDouble(PyDict_GetItemString(inDict, "ref_freq"));
  lTab->chan_bw = (odouble)PyFloat_AsDouble(PyDict_GetItemString(inDict, "chan_bw"));
  lTab->ref_pixl = (oint)PyInt_AsLong(PyDict_GetItemString(inDict, "ref_pixl"));
  tstr = PyString_AsString(PyDict_GetItemString(inDict, "obscode"));
  strncpy (lTab->obscode, tstr, lstr); lTab->obscode[lstr-1]=0;
  tstr = PyString_AsString(PyDict_GetItemString(inDict, "RefDate"));
  strncpy (lTab->RefDate, tstr, lstr); lTab->RefDate[lstr-1]=0;
  tstr = PyString_AsString(PyDict_GetItemString(inDict, "frame"));
  strncpy (lTab->frame, tstr, lstr); lTab->frame[lstr-1]=0;
  lTab->Freq = (odouble)PyFloat_AsDouble(PyDict_GetItemString(inDict, "Freq"));
  tstr = PyString_AsString(PyDict_GetItemString(inDict, "TimeSys"));
  strncpy (lTab->TimeSys, tstr, lstr); lTab->TimeSys[lstr-1]=0;
  lTab->GSTiat0 = (odouble)PyFloat_AsDouble(PyDict_GetItemString(inDict, "GSTiat0"));
  lTab->DegDay = (odouble)PyFloat_AsDouble(PyDict_GetItemString(inDict, "DegDay"));
  lTab->iatUtc = (ofloat)PyFloat_AsDouble(PyDict_GetItemString(inDict, "iatUtc"));
  lTab->PolarX = (ofloat)PyFloat_AsDouble(PyDict_GetItemString(inDict, "PolarX"));
  lTab->PolarY = (ofloat)PyFloat_AsDouble(PyDict_GetItemString(inDict, "PolarY"));
  lTab->ArrayX = (odouble)PyFloat_AsDouble(PyDict_GetItemString(inDict, "ArrayX"));
  lTab->ArrayY = (odouble)PyFloat_AsDouble(PyDict_GetItemString(inDict, "ArrayY"));
  lTab->ArrayZ = (odouble)PyFloat_AsDouble(PyDict_GetItemString(inDict, "ArrayZ"));

  if ((lTab->myDesc->access==OBIT_IO_ReadWrite) || (lTab->myDesc->access==OBIT_IO_WriteOnly)) 
    lTab->myStatus = OBIT_Modified;
} 

%}
