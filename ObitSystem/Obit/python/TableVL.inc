/* $Id:  $   */
/* DO NOT EDIT - file generated by ObitTables.pl                      */
/*--------------------------------------------------------------------*/
/*;  Copyright (C)  2019                                              */
/*;  Associated Universities, Inc. Washington DC, USA.                */
/*;                                                                   */
/*;  This program is free software; you can redistribute it and/or    */
/*;  modify it under the terms of the GNU General Public License as   */
/*;  published by the Free Software Foundation; either version 2 of   */
/*;  the License, or (at your option) any later version.              */
/*;                                                                   */
/*;  This program is distributed in the hope that it will be useful,  */
/*;  but WITHOUT ANY WARRANTY; without even the implied warranty of   */
/*;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    */
/*;  GNU General Public License for more details.                     */
/*;                                                                   */
/*;  You should have received a copy of the GNU General Public        */
/*;  License along with this program; if not, write to the Free       */
/*;  Software Foundation, Inc., 675 Massachusetts Ave, Cambridge,     */
/*;  MA 02139, USA.                                                   */
/*;                                                                   */
/*;Correspondence about this software should be addressed as follows: */
/*;         Internet email: bcotton@nrao.edu.                         */
/*;         Postal address: William Cotton                            */
/*;                         National Radio Astronomy Observatory      */
/*;                         520 Edgemont Road                         */
/*;                         Charlottesville, VA 22903-2475 USA        */
/*--------------------------------------------------------------------*/
%{
#include "Obit.h"
#include "ObitData.h"
#include "ObitTableVL.h"
%}
 
%inline %{
 
extern ObitTable* TableVL (ObitData *inData, long *tabVer,
 	                   long access,
 	                   char *tabName,
                          
                           ObitErr *err)
 {
   ObitIOAccess laccess;
   /* Cast structural keywords to correct type */
   olong ltabVer = (olong)*tabVer;
   ObitTable *outTable=NULL;
   laccess = OBIT_IO_ReadOnly;
   if (access==2) laccess = OBIT_IO_WriteOnly;
   else if (access==3) laccess = OBIT_IO_ReadWrite;
   outTable = (ObitTable*)newObitTableVLValue ((gchar*)tabName, inData, (olong*)&ltabVer,
   			   laccess, 
                          
                           err);
   *tabVer = (long)ltabVer;
   return outTable;
   }
 
extern PyObject* TableVLGetHeadKeys (ObitTable *inTab) {
  PyObject *outDict=PyDict_New();
  ObitTableVL *lTab = (ObitTableVL*)inTab;
  PyDict_SetItemString(outDict, "revision",  PyLong_FromLong((long)lTab->revision));
  PyDict_SetItemString(outDict, "BeamMajor",  PyFloat_FromDouble((double)lTab->BeamMajor));
  PyDict_SetItemString(outDict, "BeamMinor",  PyFloat_FromDouble((double)lTab->BeamMinor));
  PyDict_SetItemString(outDict, "BeamPA",  PyFloat_FromDouble((double)lTab->BeamPA));
  PyDict_SetItemString(outDict, "SortOrder",  PyLong_FromLong((long)lTab->SortOrder));
  PyDict_SetItemString(outDict, "numIndexed",  PyLong_FromLong((long)lTab->numIndexed));
  PyDict_SetItemString(outDict, "index00",  PyLong_FromLong((long)lTab->index00));
  PyDict_SetItemString(outDict, "index01",  PyLong_FromLong((long)lTab->index01));
  PyDict_SetItemString(outDict, "index02",  PyLong_FromLong((long)lTab->index02));
  PyDict_SetItemString(outDict, "index03",  PyLong_FromLong((long)lTab->index03));
  PyDict_SetItemString(outDict, "index04",  PyLong_FromLong((long)lTab->index04));
  PyDict_SetItemString(outDict, "index05",  PyLong_FromLong((long)lTab->index05));
  PyDict_SetItemString(outDict, "index06",  PyLong_FromLong((long)lTab->index06));
  PyDict_SetItemString(outDict, "index07",  PyLong_FromLong((long)lTab->index07));
  PyDict_SetItemString(outDict, "index08",  PyLong_FromLong((long)lTab->index08));
  PyDict_SetItemString(outDict, "index09",  PyLong_FromLong((long)lTab->index09));
  PyDict_SetItemString(outDict, "index10",  PyLong_FromLong((long)lTab->index10));
  PyDict_SetItemString(outDict, "index11",  PyLong_FromLong((long)lTab->index11));
  PyDict_SetItemString(outDict, "index12",  PyLong_FromLong((long)lTab->index12));
  PyDict_SetItemString(outDict, "index13",  PyLong_FromLong((long)lTab->index13));
  PyDict_SetItemString(outDict, "index14",  PyLong_FromLong((long)lTab->index14));
  PyDict_SetItemString(outDict, "index15",  PyLong_FromLong((long)lTab->index15));
  PyDict_SetItemString(outDict, "index16",  PyLong_FromLong((long)lTab->index16));
  PyDict_SetItemString(outDict, "index17",  PyLong_FromLong((long)lTab->index17));
  PyDict_SetItemString(outDict, "index18",  PyLong_FromLong((long)lTab->index18));
  PyDict_SetItemString(outDict, "index19",  PyLong_FromLong((long)lTab->index19));
  PyDict_SetItemString(outDict, "index20",  PyLong_FromLong((long)lTab->index20));
  PyDict_SetItemString(outDict, "index21",  PyLong_FromLong((long)lTab->index21));
  PyDict_SetItemString(outDict, "index22",  PyLong_FromLong((long)lTab->index22));
  PyDict_SetItemString(outDict, "index23",  PyLong_FromLong((long)lTab->index23));

  return outDict;
} 

extern void TableVLSetHeadKeys (ObitTable *inTab, PyObject *inDict) {
  ObitTableVL *lTab = (ObitTableVL*)inTab;
  char *tstr;
  int lstr=MAXKEYCHARTABLEVL;

  lTab->revision = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "revision"));
  lTab->BeamMajor = (ofloat)PyFloat_AsDouble(PyDict_GetItemString(inDict, "BeamMajor"));
  lTab->BeamMinor = (ofloat)PyFloat_AsDouble(PyDict_GetItemString(inDict, "BeamMinor"));
  lTab->BeamPA = (ofloat)PyFloat_AsDouble(PyDict_GetItemString(inDict, "BeamPA"));
  lTab->SortOrder = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "SortOrder"));
  lTab->numIndexed = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "numIndexed"));
  lTab->index00 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index00"));
  lTab->index01 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index01"));
  lTab->index02 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index02"));
  lTab->index03 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index03"));
  lTab->index04 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index04"));
  lTab->index05 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index05"));
  lTab->index06 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index06"));
  lTab->index07 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index07"));
  lTab->index08 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index08"));
  lTab->index09 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index09"));
  lTab->index10 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index10"));
  lTab->index11 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index11"));
  lTab->index12 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index12"));
  lTab->index13 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index13"));
  lTab->index14 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index14"));
  lTab->index15 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index15"));
  lTab->index16 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index16"));
  lTab->index17 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index17"));
  lTab->index18 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index18"));
  lTab->index19 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index19"));
  lTab->index20 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index20"));
  lTab->index21 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index21"));
  lTab->index22 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index22"));
  lTab->index23 = (oint)PyLong_AsLong(PyDict_GetItemString(inDict, "index23"));

  if ((lTab->myDesc->access==OBIT_IO_ReadWrite) || (lTab->myDesc->access==OBIT_IO_WriteOnly)) 
    lTab->myStatus = OBIT_Modified;
} 

%}
